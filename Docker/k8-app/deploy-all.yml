
---
# Mongo Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  # name of the deployment
  name: mongo-deploy 
spec:
  selector:
    matchLabels:
      # looks for this label to make k8 service
      app: mongo 
  replicas: 3 # 3 pods
  template:
    metadata:
      labels:
        # this label connects to the service/any other k8 components (name of pods)
        app: mongo 
    spec: # defining container specs
      containers:
      # name of container we'll give it
      - name: mongo 
        # name of image we're using to make containers in pods
        image: joeburnsjb2/tech254-2tier-db-container:latest 
        ports:
        # what port will we open for our container?
        - containerPort: 27017
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: mongo-pv

---
# Mongo Service

apiVersion: v1
# defines this as a service
kind: Service 
metadata:
  name: mongo
spec:
  selector:
    # looks for this label to make k8 service
    app: mongo 
  ports:
  - port: 27017
    targetPort: 27017

---
# Mongo pvol

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pv
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 300Mi

---
# ASG

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nodeasg
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: node
  minReplicas: 1
  maxReplicas: 4
  targetCPUUtilizationPercentage: 50

---
# Load Balancer

apiVersion: v1
# defines this as a service
kind: Service 
metadata:
  name: node-service
spec:
  selector:
    # looks for this label to make k8 service
    app: node 
  ports:
    - protocol: TCP
    # what port on the pod do we want to access with nodePort?
      port: 3000 
    # we connect to node port 3000 via port 30030
      targetPort: 3000
  type: LoadBalancer